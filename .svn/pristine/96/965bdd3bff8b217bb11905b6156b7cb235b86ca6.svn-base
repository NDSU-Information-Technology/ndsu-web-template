'use strict';

const gulp = require('gulp');

const autoprefixer = require('gulp-autoprefixer');
const babel = require('gulp-babel');
const browserSync = require('browser-sync').create();
const concat = require('gulp-concat');
const cleanCSS = require('gulp-clean-css');
const gutil = require('gulp-util');
const rename = require('gulp-rename');
const runSequence = require('run-sequence');
const sass = require('gulp-sass');
const uglify = require('gulp-uglify');

const config = {
    "components": {
        "scripts": "./src/components/**/*.js",
        "styles": "./src/components/**/*.scss",
        "container": {
            "scripts": [],
            "styles": ["./src/components/container/container.scss"]
        },
        "navbar": {
            "scripts": ["./src/components/navbar/navbar.js"],
            "styles": ["./src/components/navbar/navbar.scss"]
        },
        "socialMedia": {
            "scripts": [],
            "styles": ["./src/components/social-media/social-media.scss"]
        },
        "stickyBar": {
            "scripts": ["./src/components/sticky-bar/sticky-bar.js"],
            "styles": ["./src/components/sticky-bar/sticky-bar.scss"]
        }
    },
    "essentials": { 
        "scripts": [
            "./src/essentials/scripts/global.js",
            "./src/essentials/**/*.js"
        ],
        "styles": "./src/essentials/**/*.scss",
    },
    "html": {
        "watch": [
            './src/**/*.html'
        ]
    },
    "scripts": {
        "compile": [
            {
                "name": "minimal",
                "destFileName": "minimal",
                "sourceFiles": [
                    './src/essentials/scripts/global.js',
                ],
                "components": ['container', 'navbar', 'stickyBar']
            },
            {
                "name": "full",
                "destFileName": "script",
                "sourceFiles": [
                    './src/essentials/scripts/global.js',
                    './src/essentials/scripts/**/*.js',
                    './src/components/**/*.js'
                ],
                "components": []
            },
        ],
        "dest": './src/scripts/',
        "watch": [
            './src/components/**/*.js',
            './src/essentials/scripts/**/*.js'
        ],
    },
    "styles": {
        "compile": [
            {
                "name": "minimal",
                "destFileName": "minimal",
                "sourceFiles": ['./src/styles/scss/minimal.scss']
            },
            {
                "name": "full",
                "destFileName": "styles",
                "sourceFiles": ['./src/styles/scss/styles.scss']
            }
        ],
        "dest": './src/styles/css',
        "watch": [
            './src/components/**/*.scss',
            './src/essentials/**/*.scss',
            './src/styles/scss/**/*.scss'
        ]
    }
};

const flatten = arr => arr.reduce(
  (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []
);

let styleTasks = config.styles.compile.map(sc => {
    var taskName = 'style:' + sc.name;
    gulp.task(taskName, () => {
        return gulp.src(sc.sourceFiles)
            .pipe(sass().on('error', sass.logError))
            .pipe(rename(sc.destFileName + '.css'))
            .pipe(autoprefixer())
            .pipe(gulp.dest(config.styles.dest))
            .pipe(browserSync.stream())
            .pipe(rename(sc.destFileName + '.min.css'))
            .pipe(cleanCSS())
            .pipe(gulp.dest(config.styles.dest));
    });
    return taskName;
});
let scriptTasks = config.scripts.compile.map(sc => {
    var taskName = 'script:' + sc.name;
    gulp.task(taskName, () => {
        var sourceFiles = sc.sourceFiles;
        sourceFiles.push(sc.components.map(componentName => {
            var component = config.components[componentName];
            if (!component) return [];
            return component.scripts;
        }));
        return gulp.src(flatten(sourceFiles))
            .pipe(concat(sc.destFileName + '.js'))
            .pipe(babel({
                presets: ['es2015']
            }))
            .pipe(gulp.dest(config.scripts.dest))
            .pipe(rename(sc.destFileName + '.min.js'))
            .pipe(uglify())
            .on('error', function (err) { gutil.log(gutil.colors.red('[Error]'), err.toString()); })
            .pipe(gulp.dest(config.scripts.dest));
    });
    return taskName;
});

gulp.task('styles', () => {
    runSequence(styleTasks, (error) => {
        if (error) {
            console.log(error);
        }
    })
});

gulp.task('scripts', () => {
    runSequence(scriptTasks, (error) => {
        if (error) {
            console.log(error);
        }
    })
});

gulp.task('watch:html', function () {
    gulp.watch(config.html.watch).on('change', browserSync.reload);
});
gulp.task('watch:scripts', function () {
    gulp.watch(config.scripts.watch).on('change', () => {
        gulp.start('scripts', browserSync.reload);
    });
});
gulp.task('watch:styles', function () {
    gulp.watch(config.styles.watch, ['styles']);
});

gulp.task('watch', ['watch:html','watch:scripts', 'watch:styles']);

gulp.task('serve', ['styles'], function () {

    browserSync.init({
        server: {
            baseDir: './src',
            index: "template.html"
        }
    });

    gulp.start('watch');
});