function NavBaseObj(baseElement){
    this.element = baseElement;

    this.setRole = (value) => this._setRole(this, value);
};
NavBaseObj.prototype._setRole = (inst, value) => {
    inst.element.setAttribute('role', value);
};

function Navbar(navbarElement, parentNavItem){
    NavBaseObj.call(this, navbarElement);
    console.log(this);

    this.getNavItems = () => this._getNavItems(this);
    this.getPreviousNavItem = (currentNavItem) => this._getNextNavItem(this, currentNavItem, -1);
    this.getNextNavItem = (currentNavItem) => this._getNextNavItem(this, currentNavItem, 1);
    this.setOffset = () => this._setOffset(this);

    this.childNavItems = this.getNavItems();
    this.parentNavItem = parentNavItem;

    var isVerticalNavbar = navbarElement.classList.contains('navbar-vertical');
    var isDropUp = navbarElement.classList.contains('dropup');
    this.options = {
        autoCollapse: true,
        direction: isVerticalNavbar ? 'vertical' : 'horizontal',
        dropup: isDropUp
    };

    this.isVerticalNavbar = this.options.direction === 'vertical';
    this.isDropUp = this.options.dropup;


    if (this.parentNavItem) {
        this.setRole('menu');
        this.parentNavItem.element.classList.add('nav-item-haschild');
        if (this.isDropUp){
            this.parentNavItem.element.classList.add('nav-item-haschild-up');
        }
    } else {
        this.setRole('menubar');
    }
};
Navbar.prototype = Object.create(NavBaseObj.prototype);
Navbar.prototype.constructor = Navbar;

Navbar.prototype._getNavItems = (inst) => {
    return Array.from(inst.element.children).filter(child => {
        return child.classList.contains('nav-item');
    }).map(navItemElement => {
        return new NavItem(navItemElement, inst);
    });
};
Navbar.prototype._setOffset = (inst) => {
    if (!inst.parentNavItem) return;
    
    var el = inst.parentNavItem.element;
    var elStyle = window.getComputedStyle(el);
    
    var elHeight = el.offsetHeight;
    var elWidth = el.offsetWidth;

    if (inst.isDropUp) {
        elHeight += parseInt(elStyle.marginTop);
        inst.element.style.bottom = elHeight + 'px';
    } else{
        elHeight += parseInt(elStyle.marginBottom);
        inst.element.style.top = elHeight + 'px';
    }

    inst.element.style.minWidth = elWidth + 'px';
};
Navbar.prototype._getNextNavItem = (inst, currentNavItem, increment) => {
    var currentIndex = Array.prototype.indexOf.call(inst.childNavItems, currentNavItem);
    if (currentIndex === -1) return undefined;

    var nextIndex = currentIndex + increment;
    return nextIndex < inst.childNavItems.length ? inst.childNavItems[nextIndex] : undefined;
};

function MobileNavbar(navbarElement, parentBarElement, navbarContainerElement, navbarToggleElement){
    Navbar.call(this, navbarElement, null);

    this.containerElement = navbarContainerElement;
    this.parentBarElement = parentBarElement || this.containerElement;
    this.toggleElement = navbarToggleElement;

    this.toggleElement.setAttribute('aria-haspopup', true);
    this.toggleElement.setAttribute('aria-expanded', false);

    this.openMenu = () => this._openMobileMenu(this);
    this.closeMenu = () => this._closeMobileMenu(this);

    this.toggleElement.addEventListener('click', (e) => {
        e.preventDefault();

        if (this.element.parentNode.offsetHeight === 0) {
            this.openMenu();
        } else {
            this.closeMenu();
        }
        e.stopPropagation();
    });

    this._fixNavItemsEvents(this);

    window.fullOverlayElement.addEventListener('click', this.closeMenu);
}

MobileNavbar.prototype = Object.create(Navbar.prototype);
MobileNavbar.prototype.constructor = MobileNavbar;

MobileNavbar.prototype._fixNavItemsEvents = (inst) => {
    inst.childNavItems.filter((child) => {
        return child.element.classList.contains('nav-item-haschild');
    }).forEach((child) => {
        child.element.removeEventListener('focusin', child.focusInListener);
        child.element.removeEventListener('focusout', child.focusOutListener);
        child.element.removeEventListener('mouseenter', child.mouseInListener);
        child.element.removeEventListener('mouseleave', child.focusOutListener);
        child.element.removeEventListener('keydown', child.keysListener);

        child.element.addEventListener('click', (e) => {
            var childNavbar = child.childNavbar;
            if (!childNavbar) return;

            if (childNavbar.element.offsetHeight === 0) {
                childNavbar.element.classList.add('active');
                child.linkElement.classList.add('active');
                child.linkElement.setAttribute('aria-expanded', true);
            } else {
                childNavbar.element.classList.remove('active');
                child.linkElement.classList.remove('active');
                child.linkElement.setAttribute('aria-expanded', false);
            }
            e.preventDefault();
        });

        console.log(child);
    });
};
MobileNavbar.prototype._setOffset = (inst) => {
    if (!inst.parentBarElement) return;
    
    var el = inst.parentBarElement;
    var elStyle = window.getComputedStyle(el);
    
    var elHeight = el.offsetHeight;

    if (inst.isDropUp) {
        elHeight += parseInt(elStyle.marginTop);
        inst.containerElement.style.bottom = elHeight + 'px';
    } else{
        elHeight += parseInt(elStyle.marginBottom);
        inst.containerElement.style.top = elHeight + 'px';
    }
};
MobileNavbar.prototype._openMobileMenu = (inst) => {
    window.showOverlay();
    inst.element.parentNode.classList.add('active');
    inst.toggleElement.setAttribute('aria-expanded', true);
    inst.setOffset();
};
MobileNavbar.prototype._closeMobileMenu = (inst) => {
    inst.element.parentNode.classList.remove('active');
    inst.toggleElement.setAttribute('aria-expanded', false);
    window.hideOverlay();
};

function NavItem(navItemElement, parentNavbar){
    NavBaseObj.call(this, navItemElement);
    
    this.focus = () => this._focus(this);
    this.getChildNavbar = () => this._getChildNavbar(this);
    this.getLinkElement = () => this._getLinkElement(this);

    this.open = () => this._open(this);
    this.openChild = () => this._open(this.childNavbar);
    this.close = () => this._close(this);
    this.closeChild = () => this._close(this.childNavbar);

    this.linkElement = this.getLinkElement();
    this.parentNavbar = parentNavbar;
    this.childNavbar = this.getChildNavbar();
    this.closeTimeout = 100;
    this.closeTimeoutObj;

    this.leftNeighbor = () => {
        var neighbor;
        if (!this.parentNavbar.isVerticalNavbar) {
            neighbor = this._previousNavItem(this);
        } else if (this._parentNavItem(this)){
            var parentItem = this._parentNavItem(this);
            neighbor = parentItem.parentNavbar.getPreviousNavItem(parentItem) || parentItem;
        }
        return neighbor;
    };
    this.rightNeighbor = () => {
        var neighbor;
        if (!this.parentNavbar.isVerticalNavbar){
            neighbor = this._nextNavItem(this);
        } else if (this._parentNavItem(this)) {
            var parentItem = this._parentNavItem(this);
            neighbor = parentItem.parentNavbar.getNextNavItem(parentItem) || parentItem;
        }
        
        return neighbor;
    }
    this.downNeighbor = () => {
        var neighbor;
        if (this.parentNavbar.isVerticalNavbar){
            if (this.parentNavbar.isDropUp){
                neighbor = this._nextNavItem(this) || this._parentNavItem;
            } else {
                neighbor = this._nextNavItem(this);
            }
        } else {
            neighbor = this._firstChildNavItem(this);
        }
        return neighbor;
    };
    this.upNeighbor = () => {
        var neighbor;
        if (this.parentNavbar.isVerticalNavbar){
            if (this.parentNavbar.isDropUp){
                neighbor = this._previousNavItem(this);
            } else{
                neighbor = this._previousNavItem(this) || this._parentNavItem;
            }
        }
        return neighbor;
    };

    this.focusInListener = (e) => {
        if (this.parentNavbar.options.autoCollapse){
            this._focusInEvent(e, this);
        }
    };
    this.mouseInListener = (e) => this._focusInEvent(e, this);
    this.focusOutListener = (e) => this._focusOutEvent(e, this);
    this.keysListener =  (e) => {
        this._arrowKeysHandler(e, this);
    };

    this.element.addEventListener('focusin', this.focusInListener);
    this.element.addEventListener('focusout', this.focusOutListener);
    this.element.addEventListener('mouseenter', this.mouseInListener);
    this.element.addEventListener('mouseleave', this.focusOutListener);

    this.element.addEventListener('keydown', this.keysListener);

    this.setRole('presentation');
    if (this.linkElement){
        this.linkElement.setAttribute('role', 'menuitem');
    }
    if (this.childNavbar){
        this.linkElement.setAttribute('aria-haspopup', true);
        var elId = this.linkElement.getAttribute('id');
        if (!elId) {
            elId = 'parentLink_' + Math.random().toString(36).substr(2, 10);
            this.linkElement.setAttribute('id', elId);
        }

        this.childNavbar.element.setAttribute('aria-labelledby', elId);
        this.linkElement.setAttribute('aria-expanded', false);
    }
};

NavItem.prototype = Object.create(NavBaseObj.prototype);
NavItem.prototype.constructor = NavItem;

NavItem.prototype._getChildNavbar = (inst) => {
    var childNavbarElement = inst.element.querySelector('.child-navbar');
    return childNavbarElement ? new Navbar(childNavbarElement, inst) : undefined;
};
NavItem.prototype._getLinkElement = (inst) => {
    return inst.element.querySelector('.nav-link');
};
NavItem.prototype._focus = (inst) => {
    inst.linkElement.focus();
};

NavItem.prototype._open = (inst) => {
    if (!inst || !inst.element) return;
    inst.setOffset();
    inst.element.style.visibility = 'visible';
    inst.element.style.display = '';
    if (inst.parentNavItem){
        inst.parentNavItem.linkElement.setAttribute('aria-expanded', true);
    }
};
NavItem.prototype._close = (inst) => {
    if (!inst || !inst.element) return;
    inst.element.style.visibility = 'hidden';
    inst.element.style.display = 'none';
    if (inst.parentNavItem){
        inst.parentNavItem.linkElement.setAttribute('aria-expanded', false);
    }
};
NavItem.prototype._focusInEvent = (e, inst) => {
    inst.openChild();
    if (inst.closeTimeoutObj){
        clearTimeout(inst.closeTimeoutObj);
    }
};
NavItem.prototype._focusOutEvent = (e, inst) => {
    inst.closeTimeoutObj = setTimeout(() => {
        inst.closeChild();
    }, inst.closeTimeout);
};


NavItem.prototype._previousNavItem = (inst) => {
    return inst.parentNavbar.getPreviousNavItem(inst) || inst.parentNavbar.parentNavItem;
};
NavItem.prototype._nextNavItem = (inst) => {
    return inst.parentNavbar.getNextNavItem(inst);
};
NavItem.prototype._parentNavItem = (inst) => {
    return inst.parentNavbar.parentNavItem;
};

NavItem.prototype._firstChildNavItem = (inst) => {
    if (!inst.childNavbar) return undefined;
    return inst.childNavbar.childNavItems[0];
};
NavItem.prototype._arrowKeysHandler = (e, inst) => {
    e.stopPropagation();
    var nextItem;
    if (e.which === 37) {
        nextItem = inst.leftNeighbor();
    } else if (e.which === 38) {
        nextItem = inst.upNeighbor();
    } else if (e.which === 39) {
        nextItem = inst.rightNeighbor();
    } else if (e.which === 40) {
        nextItem = inst.downNeighbor();
    }

    if (nextItem) {
        e.preventDefault();
        nextItem.focus();
    }
}

function StickyNav(baseElement){
    this.element = baseElement;

    this.offsetTop = this.element.offsetTop;
    window.addEventListener('scroll', (event) => {
        var currentY = (document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop;

        if (currentY >= this.offsetTop){
            this.element.classList.add('sticky-navbar-on');
        } else {
            this.element.classList.remove('sticky-navbar-on');
        }
    });
};

var mobileNavbars = Array.prototype.map.call(document.querySelectorAll('.navbar-mobile-container'), (navbarContainer) => {
    var mobileNavbar = navbarContainer.querySelector('.navbar-mobile:not(.child-navbar)');
    var parentBarElement = navbarContainer.parentElement;
    var navbarToggle = navbarContainer.previousElementSibling;

    if (!mobileNavbar || !navbarToggle || !navbarToggle.classList.contains('navbar-toggle')) return 0;

    Array.prototype.forEach.call(document.querySelectorAll('.navbar-mobilize:not(.child-navbar):not(.navbar-mobile)'), (navbar) => {
        Array.from(navbar.children).filter(child => {
            return child.classList.contains('nav-item') && !child.classList.contains('hide-mobile');
        }).forEach((navItem) => {
            mobileNavbar.appendChild(navItem.cloneNode(true));
        });
    });
    
    return new MobileNavbar(mobileNavbar, parentBarElement, navbarContainer, navbarToggle);
});

var navbars = Array.prototype.map.call(document.querySelectorAll('.navbar:not(.child-navbar):not(.navbar-mobile)'), (navbar) => {
    return new Navbar(navbar);
});


var stickyNavbars = Array.prototype.map.call(document.querySelectorAll('.sticky-navbar'), (stickyNavbar) => {
    return new StickyNav(stickyNavbar);
});
